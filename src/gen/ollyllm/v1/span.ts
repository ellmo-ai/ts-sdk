// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "ollyllm/v1/span.proto" (package "ollyllm.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../google/protobuf/timestamp";
/**
 * Span represents a trace span (root or not) reported by a client
 *
 * @generated from protobuf message ollyllm.v1.Span
 */
export interface Span {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string; // User facing ID of the span
    /**
     * @generated from protobuf field: google.protobuf.Timestamp start_timestamp = 2;
     */
    startTimestamp?: Timestamp; // Timestamp of span start
    /**
     * @generated from protobuf field: google.protobuf.Timestamp end_timestamp = 3;
     */
    endTimestamp?: Timestamp; // Timestamp of span ending
    /**
     * @generated from protobuf field: string operation_name = 4;
     */
    operationName: string; // Name of the operation that span takes place in
    /**
     * @generated from protobuf field: string parent_id = 5;
     */
    parentId: string; // ID of the span's parent, if exists
    /**
     * @generated from protobuf field: string trace_id = 6;
     */
    traceId: string; // ID of the span's trace
}
/**
 * ReportSpanRequest represents a request to submit one or more spans
 *
 * @generated from protobuf message ollyllm.v1.ReportSpanRequest
 */
export interface ReportSpanRequest {
    /**
     * @generated from protobuf field: repeated ollyllm.v1.Span spans = 1;
     */
    spans: Span[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Span$Type extends MessageType<Span> {
    constructor() {
        super("ollyllm.v1.Span", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start_timestamp", kind: "message", T: () => Timestamp },
            { no: 3, name: "end_timestamp", kind: "message", T: () => Timestamp },
            { no: 4, name: "operation_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "parent_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "trace_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Span>): Span {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.operationName = "";
        message.parentId = "";
        message.traceId = "";
        if (value !== undefined)
            reflectionMergePartial<Span>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Span): Span {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* google.protobuf.Timestamp start_timestamp */ 2:
                    message.startTimestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startTimestamp);
                    break;
                case /* google.protobuf.Timestamp end_timestamp */ 3:
                    message.endTimestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endTimestamp);
                    break;
                case /* string operation_name */ 4:
                    message.operationName = reader.string();
                    break;
                case /* string parent_id */ 5:
                    message.parentId = reader.string();
                    break;
                case /* string trace_id */ 6:
                    message.traceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Span, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* google.protobuf.Timestamp start_timestamp = 2; */
        if (message.startTimestamp)
            Timestamp.internalBinaryWrite(message.startTimestamp, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp end_timestamp = 3; */
        if (message.endTimestamp)
            Timestamp.internalBinaryWrite(message.endTimestamp, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string operation_name = 4; */
        if (message.operationName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.operationName);
        /* string parent_id = 5; */
        if (message.parentId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.parentId);
        /* string trace_id = 6; */
        if (message.traceId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.traceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ollyllm.v1.Span
 */
export const Span = new Span$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportSpanRequest$Type extends MessageType<ReportSpanRequest> {
    constructor() {
        super("ollyllm.v1.ReportSpanRequest", [
            { no: 1, name: "spans", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Span }
        ]);
    }
    create(value?: PartialMessage<ReportSpanRequest>): ReportSpanRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.spans = [];
        if (value !== undefined)
            reflectionMergePartial<ReportSpanRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportSpanRequest): ReportSpanRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ollyllm.v1.Span spans */ 1:
                    message.spans.push(Span.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReportSpanRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ollyllm.v1.Span spans = 1; */
        for (let i = 0; i < message.spans.length; i++)
            Span.internalBinaryWrite(message.spans[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ollyllm.v1.ReportSpanRequest
 */
export const ReportSpanRequest = new ReportSpanRequest$Type();
