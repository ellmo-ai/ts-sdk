// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "test_execution.proto" (package "ollyllm", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 *  VersionedTest represents a unique test.
 *
 * @generated from protobuf message ollyllm.VersionedTest
 */
export interface VersionedTest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number; // ID of test
    /**
     * @generated from protobuf field: int32 version = 2;
     */
    version: number; // Version of test
}
/**
 *  TestExecutionRequest represents a request to execute a versioned test.
 *
 * @generated from protobuf message ollyllm.TestExecutionRequest
 */
export interface TestExecutionRequest {
    /**
     * @generated from protobuf field: int32 session_id = 1;
     */
    sessionId: number; // ID of trace session
    /**
     * @generated from protobuf field: ollyllm.VersionedTest versioned_test = 2;
     */
    versionedTest?: VersionedTest; // Unique test
    /**
     * @generated from protobuf field: repeated bytes test_input = 3;
     */
    testInput: Uint8Array[]; // List of parameters for test
    /**
     * @generated from protobuf field: google.protobuf.Timestamp request_timestamp = 4;
     */
    requestTimestamp?: Timestamp; // Client request time of test execution 
}
// @generated message type with reflection information, may provide speed optimized methods
class VersionedTest$Type extends MessageType<VersionedTest> {
    constructor() {
        super("ollyllm.VersionedTest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "version", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<VersionedTest>): VersionedTest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.version = 0;
        if (value !== undefined)
            reflectionMergePartial<VersionedTest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VersionedTest): VersionedTest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* int32 version */ 2:
                    message.version = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VersionedTest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* int32 version = 2; */
        if (message.version !== 0)
            writer.tag(2, WireType.Varint).int32(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ollyllm.VersionedTest
 */
export const VersionedTest = new VersionedTest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestExecutionRequest$Type extends MessageType<TestExecutionRequest> {
    constructor() {
        super("ollyllm.TestExecutionRequest", [
            { no: 1, name: "session_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "versioned_test", kind: "message", T: () => VersionedTest },
            { no: 3, name: "test_input", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "request_timestamp", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<TestExecutionRequest>): TestExecutionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sessionId = 0;
        message.testInput = [];
        if (value !== undefined)
            reflectionMergePartial<TestExecutionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestExecutionRequest): TestExecutionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 session_id */ 1:
                    message.sessionId = reader.int32();
                    break;
                case /* ollyllm.VersionedTest versioned_test */ 2:
                    message.versionedTest = VersionedTest.internalBinaryRead(reader, reader.uint32(), options, message.versionedTest);
                    break;
                case /* repeated bytes test_input */ 3:
                    message.testInput.push(reader.bytes());
                    break;
                case /* google.protobuf.Timestamp request_timestamp */ 4:
                    message.requestTimestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.requestTimestamp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestExecutionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 session_id = 1; */
        if (message.sessionId !== 0)
            writer.tag(1, WireType.Varint).int32(message.sessionId);
        /* ollyllm.VersionedTest versioned_test = 2; */
        if (message.versionedTest)
            VersionedTest.internalBinaryWrite(message.versionedTest, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated bytes test_input = 3; */
        for (let i = 0; i < message.testInput.length; i++)
            writer.tag(3, WireType.LengthDelimited).bytes(message.testInput[i]);
        /* google.protobuf.Timestamp request_timestamp = 4; */
        if (message.requestTimestamp)
            Timestamp.internalBinaryWrite(message.requestTimestamp, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ollyllm.TestExecutionRequest
 */
export const TestExecutionRequest = new TestExecutionRequest$Type();
